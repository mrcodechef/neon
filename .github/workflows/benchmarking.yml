# TODO: Revert all the changes before the merge
# This should be moved to a separate workflow and here only for testing purposes
name: benchmarking

on:
  workflow_dispatch:
    inputs:
      db_size:
        description: "Database target size in MB"
        require: false
        default: 1
      duration:
        description: "Duration of pgbench test in seconds (doesn't include pgbench init)"
        require: false
        default: 1

jobs:
  bench:
    runs-on: [self-hosted, zenith-benchmarker]

    env:
      POSTGRES_DISTRIB_DIR: "/usr/pgsql-14"

    steps:
    - name: Checkout zenith repo
      uses: actions/checkout@v3

    - name: Install poetry & deps
      run: |
        python3 -m pip install --upgrade poetry wheel
        # since pip/poetry caches are reused there shouldn't be any troubles with install every time
        ./scripts/pysync

    - name: Setup cluster
      env:
        BENCHMARK_CONNSTR: "${{ secrets.BIGDB_STAGING_CONNSTR }}"
      shell: bash
      run: |
        set -e

        echo "Starting cluster"
        $POSTGRES_DISTRIB_DIR/bin/psql $BENCHMARK_CONNSTR -c "SELECT 1"

    - name: Run benchmark
      env:
        TEST_PG_BENCH_DURATIONS_MATRIX: "${{ github.event.inputs.duration }}"
        TEST_PG_BENCH_DB_SIZE_MB_MATRIX: "${{ github.event.inputs.db_size }}"
        PLATFORM: "neon-staging"
        BENCHMARK_CONNSTR: "${{ secrets.BIGDB_STAGING_CONNSTR }}"
        REMOTE_ENV: "1" # indicate to test harness that we do not have zenith binaries locally
      run: |
        rm -rf perf-report-staging
        mkdir -p perf-report-staging
        ./scripts/pytest test_runner/performance/ -v -m "remote_cluster" -m "manual" --skip-interfering-proc-check --out-dir perf-report-staging --timeout 86400

    - name: Submit result
      env:
        VIP_VAP_ACCESS_TOKEN: "${{ secrets.VIP_VAP_ACCESS_TOKEN }}"
        PERF_TEST_RESULT_CONNSTR: "${{ secrets.PERF_TEST_RESULT_CONNSTR }}"
      run: |
        REPORT_FROM=$(realpath perf-report-staging) REPORT_TO=staging_big scripts/generate_and_push_perf_report.sh
